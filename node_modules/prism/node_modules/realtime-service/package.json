{
  "name": "realtime-service",
  "description": "Realtime Service",
  "version": "0.0.1",
  "author": {
    "name": "Owen Barnes",
    "email": "owen@socketstream.org"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "realtime-service-client": "~0.0.1"
  },
  "devDependencies": {
    "mocha": "1.8.x",
    "should": "1.2.x"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# Realtime Service\n\n**Status: Usable, but a work in progress. Feedback encouraged!**\n\nAn open standard describing a mix of client and server-side code designed to communicate over a persistent connection. This will usually be a WebSocket connection, but any [Realtime Transport](https://github.com/socketstream/realtime-transport) module is compatible.\n\nRealtime Services are designed to be very easy to understand, write, test and share on `npm`.\n\nEach service is defined in the simplest possible way: as a plain old JavaScript object. Here's a simple example:\n\n```js\nvar service = {\n  client: function(client) {\n    client.onmessage = function(msg) {\n      console.log('Message in from server:', msg);\n    }\n  },\n\n  server: function(server) {\n    setInterval(function(){\n      server.broadcast('Hello!');  \n    }, 1000);\n  }\n}\n```\n\n## Examples Services\n\n(all alpha quality for now)\n\n[**rts-rpc**](https://github.com/socketstream/rts-rpc)  \n[**rts-pubsub**](https://github.com/socketstream/rts-pubsub)  \n[**rts-livereload**](https://github.com/socketstream/rts-livereload)\n\n\n## Features\n\n* super-simple: services are just JavaScript objects\n* client and server code can expose APIs to be called by the app\n* easy to write tests\n* the [realtime-service-client](https://github.com/socketstream/realtime-service-client) can run in a browser or separate node process\n* each service has it's own directory to store files (e.g. model definitions)\n* efficiently handles callbacks, even for non-JSON messages\n* services can optionally use Sessions (provided by the server)\n* server is notified when a client connect/disconnect (allowing cleanup)\n* services can send JavaScript assets to the browser\n* optionally handles JSON encoding/decoding for you\n* provides a standard logging API\n* ultra light weight client-side code (for sending to browser)\n\n\nRealtime Services **do not** care about:\n\n* the underlying transport layer (abstracted away by [Realtime Transport](https://github.com/socketstream/realtime-transport))\n* how code is delivered to the browser (left to the framework or app to implement)\n\n\n## Implementations\n\nRealtime Services are currently implemented in [**Prism**](https://github.com/socketstream/prism), the realtime server component of SocketStream 0.4. \n\nAs other frameworks / toolkits implement them, they will be listed here.\n\n\n## Contents\n\nRealtime Services consist of\n\n1. This - the server-side library\n2. The [realtime-service-client](https://github.com/socketstream/realtime-service-client) module\n3. The Realtime Server Spec (Coming soon!)\n\n\n## API\n\nComing soon!\n\n\n## History\n\nRealtime Services are the evolution of an idea called \"Request Responders\" which first appeared in SocketStream 0.3. Despite a horribly clunky API, the idea proved to be popular with third-party modules for Backbone and Angular soon appearing.\n\nRealtime Services will be one of the key features of SocketStream 0.4. However, I hope by ensuring the spec is a simple as possible (with minimal dependencies), other frameworks will support Realtime Services in the future. The ultimate goal is an ecosystem of reusable components using 100% standard `npm` packages.\n\n\n## Licence\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "realtime-service@0.0.1",
  "_shasum": "d8cffcfa01d9c07e84256e671d9d71aed31c6323",
  "_from": "realtime-service@~0.0.1",
  "_resolved": "https://registry.npmjs.org/realtime-service/-/realtime-service-0.0.1.tgz"
}
